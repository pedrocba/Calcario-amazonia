/**
 * TESTE - GERA√á√ÉO AUTOM√ÅTICA DE C√ìDIGO DE PRODUTO
 * ==============================================
 */

import { createClient } from '@supabase/supabase-js';

const supabaseUrl = 'https://rfdedsmxhsxalyzxstxh.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InJmZGVkc214aHN4YWx5enhzdHhoIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTgwNjQyMzEsImV4cCI6MjA3MzY0MDIzMX0.YETntgLIODtULiblwg5yFsDJ_kJ-HFWMgWBXf6V-T4g';

const supabase = createClient(supabaseUrl, supabaseKey);

async function testCodeGeneration() {
  console.log('üîß TESTE - GERA√á√ÉO AUTOM√ÅTICA DE C√ìDIGO...\n');

  try {
    const companyId = '68cacb913d169d191be6c90d'; // CBA - Santar√©m (Matriz)
    
    // 1. Verificar produtos existentes
    console.log('1Ô∏è‚É£ Verificando produtos existentes:');
    const { data: products } = await supabase
      .from('products')
      .select('code, created_at')
      .eq('company_id', companyId)
      .order('created_at', { ascending: false });
    
    console.log(`Total de produtos: ${products.length}`);
    products.forEach((product, index) => {
      console.log(`   ${index + 1}. C√≥digo: "${product.code}" - Criado: ${product.created_at}`);
    });

    // 2. Simular a l√≥gica de gera√ß√£o de c√≥digo
    console.log('\n2Ô∏è‚É£ Simulando gera√ß√£o de c√≥digo:');
    
    let newCode;
    if (products && products.length > 0 && products[0].code) {
      const lastCode = products[0].code;
      console.log('√öltimo c√≥digo encontrado:', lastCode);
      
      // Extrai a parte num√©rica do c√≥digo (ex: "PROD-00010" ou "PROD000010" -> 10)
      const matchWithDash = lastCode.match(/PROD-(\d+)/);
      const matchWithoutDash = lastCode.match(/PROD(\d+)/);
      
      if (matchWithDash) {
        const lastNumber = parseInt(matchWithDash[1], 10);
        const nextNumber = lastNumber + 1;
        newCode = `PROD-${nextNumber.toString().padStart(5, '0')}`;
        console.log(`Formato com tra√ßo - N√∫mero anterior: ${lastNumber}, Pr√≥ximo: ${nextNumber}`);
      } else if (matchWithoutDash) {
        const lastNumber = parseInt(matchWithoutDash[1], 10);
        const nextNumber = lastNumber + 1;
        newCode = `PROD-${nextNumber.toString().padStart(5, '0')}`;
        console.log(`Formato sem tra√ßo - N√∫mero anterior: ${lastNumber}, Pr√≥ximo: ${nextNumber}`);
      } else {
        // Se o formato n√£o for reconhecido, come√ßa do 1
        newCode = 'PROD-00001';
        console.log('Formato n√£o reconhecido, come√ßando do 1');
      }
    } else {
      // Se n√£o h√° produtos para a filial, come√ßa do 1
      newCode = 'PROD-00001';
      console.log('Nenhum produto encontrado, come√ßando do 1');
    }

    console.log(`Novo c√≥digo gerado: ${newCode}`);

    // 3. Verificar se o c√≥digo j√° existe
    console.log('\n3Ô∏è‚É£ Verificando se o c√≥digo j√° existe:');
    const { data: existingProduct } = await supabase
      .from('products')
      .select('id')
      .eq('company_id', companyId)
      .eq('code', newCode)
      .single();
    
    if (existingProduct) {
      console.log('‚ùå C√≥digo j√° existe! Precisa ajustar a l√≥gica.');
    } else {
      console.log('‚úÖ C√≥digo √© √∫nico! Pode ser usado.');
    }

    console.log('\nüéØ RESULTADO:');
    console.log('‚úÖ L√≥gica de gera√ß√£o de c√≥digo implementada!');
    console.log('üîß Agora teste no frontend:');
    console.log('   1. Clique em "Novo Produto"');
    console.log('   2. O campo c√≥digo deve aparecer preenchido e bloqueado');
    console.log('   3. Preencha os outros campos e salve');

  } catch (error) {
    console.error('üí• Erro:', error);
  }
}

testCodeGeneration();
