// ==============================================
// SCRIPT DE TESTE PARA P√ÅGINAS DE PRODU√á√ÉO
// ==============================================
// Execute este script no console do navegador para testar as p√°ginas

console.log('üöÄ INICIANDO TESTES DAS P√ÅGINAS DE PRODU√á√ÉO');
console.log('==========================================');

// Fun√ß√£o para testar conex√£o com Supabase
async function testSupabaseConnection() {
    console.log('\n1. Testando conex√£o com Supabase...');
    
    try {
        // Verificar se o supabase est√° dispon√≠vel
        if (typeof window.supabase === 'undefined') {
            console.error('‚ùå Supabase n√£o est√° dispon√≠vel no window');
            return false;
        }
        
        // Testar consulta simples
        const { data, error } = await window.supabase
            .from('companies')
            .select('id, name')
            .limit(1);
            
        if (error) {
            console.error('‚ùå Erro na conex√£o:', error.message);
            return false;
        }
        
        console.log('‚úÖ Conex√£o com Supabase funcionando');
        console.log('üìä Dados encontrados:', data);
        return true;
    } catch (error) {
        console.error('‚ùå Erro inesperado:', error);
        return false;
    }
}

// Fun√ß√£o para testar carregamento de dados
async function testDataLoading() {
    console.log('\n2. Testando carregamento de dados...');
    
    const companyId = '00000000-0000-0000-0000-000000000001';
    
    try {
        // Testar produtos
        const { data: products, error: productsError } = await window.supabase
            .from('products')
            .select('*')
            .eq('company_id', companyId);
            
        if (productsError) {
            console.warn('‚ö†Ô∏è Erro ao carregar produtos:', productsError.message);
        } else {
            console.log('‚úÖ Produtos carregados:', products?.length || 0);
        }
        
        // Testar clientes
        const { data: customers, error: customersError } = await window.supabase
            .from('contacts')
            .select('*')
            .eq('company_id', companyId)
            .eq('type', 'cliente');
            
        if (customersError) {
            console.warn('‚ö†Ô∏è Erro ao carregar clientes:', customersError.message);
        } else {
            console.log('‚úÖ Clientes carregados:', customers?.length || 0);
        }
        
        // Testar vendas
        const { data: sales, error: salesError } = await window.supabase
            .from('vendas')
            .select('*')
            .eq('company_id', companyId);
            
        if (salesError) {
            console.warn('‚ö†Ô∏è Erro ao carregar vendas:', salesError.message);
        } else {
            console.log('‚úÖ Vendas carregadas:', sales?.length || 0);
        }
        
        return true;
    } catch (error) {
        console.error('‚ùå Erro ao testar carregamento:', error);
        return false;
    }
}

// Fun√ß√£o para testar cria√ß√£o de dados
async function testDataCreation() {
    console.log('\n3. Testando cria√ß√£o de dados...');
    
    const companyId = '00000000-0000-0000-0000-000000000001';
    
    try {
        // Testar cria√ß√£o de cliente
        const { data: newCustomer, error: customerError } = await window.supabase
            .from('contacts')
            .insert([{
                name: 'Cliente Teste',
                email: 'teste@exemplo.com',
                phone: '(11) 99999-9999',
                type: 'cliente',
                active: true,
                company_id: companyId
            }])
            .select()
            .single();
            
        if (customerError) {
            console.warn('‚ö†Ô∏è Erro ao criar cliente:', customerError.message);
        } else {
            console.log('‚úÖ Cliente criado com sucesso:', newCustomer);
            
            // Limpar cliente de teste
            await window.supabase
                .from('contacts')
                .delete()
                .eq('id', newCustomer.id);
            console.log('üßπ Cliente de teste removido');
        }
        
        return true;
    } catch (error) {
        console.error('‚ùå Erro ao testar cria√ß√£o:', error);
        return false;
    }
}

// Fun√ß√£o para testar pol√≠ticas RLS
async function testRLSPolicies() {
    console.log('\n4. Testando pol√≠ticas RLS...');
    
    try {
        // Tentar acessar dados de outra empresa (deve falhar)
        const { data, error } = await window.supabase
            .from('products')
            .select('*')
            .eq('company_id', '00000000-0000-0000-0000-000000000999'); // ID inexistente
            
        if (error) {
            console.log('‚úÖ RLS funcionando - acesso negado para empresa inexistente');
        } else {
            console.log('‚ö†Ô∏è RLS pode n√£o estar funcionando - dados retornados:', data);
        }
        
        return true;
    } catch (error) {
        console.error('‚ùå Erro ao testar RLS:', error);
        return false;
    }
}

// Fun√ß√£o principal de teste
async function runAllTests() {
    console.log('üîç Executando todos os testes...');
    
    const results = {
        connection: await testSupabaseConnection(),
        dataLoading: await testDataLoading(),
        dataCreation: await testDataCreation(),
        rlsPolicies: await testRLSPolicies()
    };
    
    console.log('\nüìä RESULTADOS DOS TESTES:');
    console.log('========================');
    console.log('Conex√£o Supabase:', results.connection ? '‚úÖ' : '‚ùå');
    console.log('Carregamento de dados:', results.dataLoading ? '‚úÖ' : '‚ùå');
    console.log('Cria√ß√£o de dados:', results.dataCreation ? '‚úÖ' : '‚ùå');
    console.log('Pol√≠ticas RLS:', results.rlsPolicies ? '‚úÖ' : '‚ùå');
    
    const allPassed = Object.values(results).every(result => result === true);
    
    if (allPassed) {
        console.log('\nüéâ TODOS OS TESTES PASSARAM!');
        console.log('‚úÖ As p√°ginas est√£o prontas para produ√ß√£o');
    } else {
        console.log('\n‚ö†Ô∏è ALGUNS TESTES FALHARAM');
        console.log('‚ùå Verifique os erros acima antes de usar em produ√ß√£o');
    }
    
    return results;
}

// Executar testes automaticamente
runAllTests();

// Exportar fun√ß√µes para uso manual
window.testProductionPages = {
    testSupabaseConnection,
    testDataLoading,
    testDataCreation,
    testRLSPolicies,
    runAllTests
};

console.log('\nüí° DICAS:');
console.log('- Use window.testProductionPages.runAllTests() para executar novamente');
console.log('- Verifique o console para detalhes de cada teste');
console.log('- Se houver erros, verifique as pol√≠ticas RLS no Supabase');











