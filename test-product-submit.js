// ==============================================
// SCRIPT DE TESTE PARA FUN√á√ÉO handleSubmit
// ==============================================
// Execute este script no console do navegador para testar a fun√ß√£o

console.log('üß™ TESTANDO FUN√á√ÉO handleSubmit DE PRODUTOS');
console.log('==========================================');

// Fun√ß√£o para testar busca do company_id do perfil
async function testCompanyIdFromProfile() {
    console.log('\n1. Testando busca do company_id do perfil...');
    
    try {
        // Buscar usu√°rio autenticado
        const { data: { user }, error: authError } = await window.supabase.auth.getUser();
        
        if (authError || !user) {
            console.error('‚ùå Erro de autentica√ß√£o:', authError);
            return false;
        }
        
        console.log('‚úÖ Usu√°rio autenticado:', user.id);
        
        // Buscar perfil do usu√°rio
        const { data: profileData, error: profileError } = await window.supabase
            .from('profiles')
            .select('company_id')
            .eq('user_id', user.id)
            .single();
            
        if (profileError || !profileData) {
            console.error('‚ùå Erro ao buscar perfil:', profileError);
            return false;
        }
        
        console.log('‚úÖ Perfil encontrado:', profileData);
        console.log('‚úÖ Company ID:', profileData.company_id);
        
        return profileData.company_id;
    } catch (error) {
        console.error('‚ùå Erro inesperado:', error);
        return false;
    }
}

// Fun√ß√£o para testar cria√ß√£o de produto
async function testProductCreation() {
    console.log('\n2. Testando cria√ß√£o de produto...');
    
    try {
        const company_id = await testCompanyIdFromProfile();
        
        if (!company_id) {
            console.error('‚ùå N√£o foi poss√≠vel obter company_id');
            return false;
        }
        
        // Dados de teste para o produto
        const testProductData = {
            name: 'Produto Teste',
            code: 'TESTE001',
            category_id: '00000000-0000-0000-0000-000000000002', // ID de categoria de teste
            cost_price: 10.00,
            sale_price: 15.00,
            description: 'Produto de teste para verificar funcionamento',
            min_qty: 10,
            current_stock: 50
        };
        
        const productToSave = {
            ...testProductData,
            company_id: company_id,
            active: true,
            condition: 'novo'
        };
        
        console.log('üì¶ Dados do produto a ser criado:', productToSave);
        
        // Criar produto
        const { data, error } = await window.supabase
            .from('products')
            .insert([productToSave])
            .select();
            
        if (error) {
            console.error('‚ùå Erro ao criar produto:', error);
            return false;
        }
        
        console.log('‚úÖ Produto criado com sucesso:', data);
        
        // Limpar produto de teste
        await window.supabase
            .from('products')
            .delete()
            .eq('id', data[0].id);
        console.log('üßπ Produto de teste removido');
        
        return true;
    } catch (error) {
        console.error('‚ùå Erro ao testar cria√ß√£o:', error);
        return false;
    }
}

// Fun√ß√£o para verificar se a tabela profiles existe
async function testProfilesTable() {
    console.log('\n3. Verificando tabela profiles...');
    
    try {
        const { data, error } = await window.supabase
            .from('profiles')
            .select('*')
            .limit(1);
            
        if (error) {
            console.error('‚ùå Erro ao acessar tabela profiles:', error);
            return false;
        }
        
        console.log('‚úÖ Tabela profiles acess√≠vel');
        console.log('üìä Dados encontrados:', data);
        
        return true;
    } catch (error) {
        console.error('‚ùå Erro inesperado:', error);
        return false;
    }
}

// Fun√ß√£o principal de teste
async function runAllTests() {
    console.log('üîç Executando todos os testes...');
    
    const results = {
        profilesTable: await testProfilesTable(),
        companyId: await testCompanyIdFromProfile(),
        productCreation: await testProductCreation()
    };
    
    console.log('\nüìä RESULTADOS DOS TESTES:');
    console.log('========================');
    console.log('Tabela profiles:', results.profilesTable ? '‚úÖ' : '‚ùå');
    console.log('Company ID do perfil:', results.companyId ? '‚úÖ' : '‚ùå');
    console.log('Cria√ß√£o de produto:', results.productCreation ? '‚úÖ' : '‚ùå');
    
    const allPassed = Object.values(results).every(result => result === true);
    
    if (allPassed) {
        console.log('\nüéâ TODOS OS TESTES PASSARAM!');
        console.log('‚úÖ A fun√ß√£o handleSubmit est√° funcionando corretamente');
    } else {
        console.log('\n‚ö†Ô∏è ALGUNS TESTES FALHARAM');
        console.log('‚ùå Verifique os erros acima');
    }
    
    return results;
}

// Executar testes automaticamente
runAllTests();

// Exportar fun√ß√µes para uso manual
window.testProductSubmit = {
    testProfilesTable,
    testCompanyIdFromProfile,
    testProductCreation,
    runAllTests
};

console.log('\nüí° DICAS:');
console.log('- Use window.testProductSubmit.runAllTests() para executar novamente');
console.log('- Verifique se a tabela profiles existe e tem dados');
console.log('- Confirme se o usu√°rio est√° associado a uma empresa');


















